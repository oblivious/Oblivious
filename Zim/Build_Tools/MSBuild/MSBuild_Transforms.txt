Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-01-30T12:37:02+00:00

====== MSBuild Transforms ======
Created Thursday 30 January 2014

A transform is a one-to-one conversion of one item collection to another. In additon to enabling a project to convert item collections, a transform enables a target to identify a direct mapping between its inputs and outputs.

=== Transform Modifiers ===
Transforms are not arbitrary, but are limited by special syntax in which all transform modifiers must be in the format //%(ItemMetaDataName)//. Any item metadata can be used as a transform modifier. This includes the well-known item metadata that is assigned to every item when it is created. For a list of well-known item metadata, see...//blah blah blah, another page.//

== MSBuild Well-known Item Metadata ==
	//This only applies to individual items.//
	**%(FullPath), %(RootDir), %(Filename), %(Extension), %(RelativeDir), %(Directory), %(RecursiveDir), %(Identity), %(ModifiedTime), %(CreatedTime), %(AccessedTime)**
	For the following item:
	''<ItemGroup>''
	''	<MyItem Include="Source\Program.cs" />''
	''</ItemGroup>''
	The relevant values are: **FullPath**=''C:\MyProject\Source\Program.cs''; **RootDir**=''C:\''; **Filename**=''Program''; **Extension**=''.cs''; **RelativeDir**=''Source\''; **Directory**=''MyProject\Source\''; **RecursiveDir**=''???''; **Identity**=''Source\Program.cs''. You can guess the meaning of the "time" values.
	
	**RecursiveDir:**
	If the **Include** attibute contains the wildcard **, this metadata specifies the part of the path that replaces the wildcard. If the folder ''C:\MySolution\MyProject\Source\'' contains the file ''Program.cs'' and if the project file contains this item:
	'''
	<ItemGroup>
		<MyItem Include="C:\**\Program.cs" />
	</ItemGroup>
	'''
	Then the value of __%(MyItem.RecursiveDir)__ would be ''MySolution\MyProject\Source\''. This may not work exactly as expected.
	
=== Transform Modifiers (cont.) ===
In the following example, a list of .resx files is transformed into a list .resources files.
''	@(RESXFile->'Toolset\%(filename).resources')''
You can specify a custom separater fr a transformed item collection in the same way you specify a separater for a standard item collection. For example, to separate a transformed item collection by using a comma (,) instead of the default semicolon (;) use:
	''@(RESXFile->'Toolset\%(filename)%(extension)', ',')''


=== Dependency Analysis ===
Transforms guarantee a one-to-one mapping between the transformed item collection and the original collection. Therefore, if a traget creates outputs that are transforms of the inputs, MSBuild can analyze the timestamps of the inputs and outputs, and decide whether to skip, build, or partially rebuild a target.
In the //Copy Task// in the following example, every file in the //BuiltAssemblies// item collection maps to a file in the destination folder of the task, specified by using a transform in the **Outputs **attribute. If a file in the //BuiltAssemblies //item collection changes, the **Copy** task will be run only the for changed file and all other files will be skipped.

	'''
	<Target Name="CopyOutputs"
	    Inputs="@(BuiltAssemblies)"
	    Outputs="@(BuiltAssemblies -> '$(OutputPath)%(Filename)%(Extension)')">
	    <Copy
	        SourceFiles="@(BuiltAssemblies)"
	        DestinationFolder="$(OutputPath)"/>
	</Target>
	'''


=== Transforms Example ===
The following project definition contains an item named 'Schema' and a number of transforms on that item.
	'''
	<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	    <ItemGroup>
	        <Schema Include="sub1\**\*.xsd"/>
	    </ItemGroup>
	
	    <Target Name="Messages">
	        <Message Text="rootdir: @(Schema->'%(rootdir)')"/>
	        <Message Text="fullpath: @(Schema->'%(fullpath)')"/>
	        <Message Text="rootdir + directory + filename + extension: @(Schema->'%(rootdir)%(directory)%(filename)%(extension)')"/>
	        <Message Text="identity: @(Schema->'%(identity)')"/>
	        <Message Text="filename: @(Schema->'%(filename)')"/>
	        <Message Text="directory: @(Schema->'%(directory)')"/>
	        <Message Text="relativedir: @(Schema->'%(relativedir)')"/>
	        <Message Text="extension: @(Schema->'%(extension)')"/>
	    </Target>
	</Project>
	'''

The output of this is as follows:
	'''
	rootdir: C:\
	fullpath: C:\xmake\sub1\sub2\sub3\myfile.xsd
	rootdir + directory + filename + extension: C:\xmake\sub1\sub2\sub3\myfile.xsd
	identity: sub1\sub2\sub3\myfile.xsd
	filename: myfile
	directory: xmake\sub1\sub2\sub3\
	relativedir: sub1\sub2\sub3\
	extension: .xsd
	'''
